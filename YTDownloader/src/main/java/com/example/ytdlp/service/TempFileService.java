package com.example.ytdlp.service;

import com.example.ytdlp.utils.model.DownloadRequest;
import com.example.ytdlp.utils.model.FormatSelection;
import com.example.ytdlp.utils.model.VideoFormatInfo;
import com.example.ytdlp.utils.model.VideoInfo;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;

@Slf4j
@Service
class TempFileService {
    public Path createCookiesFile(DownloadRequest request) throws IOException {
        if (request.getCookies() == null || request.getCookies().trim().isEmpty()) {
            return null;
        }

        Path cookiesFile = Files.createTempFile("cookies_download_" + System.currentTimeMillis(), ".txt");
        String formattedCookies = formatCookiesForNetscape(request.getCookies());
        Files.writeString(cookiesFile, formattedCookies, StandardCharsets.UTF_8);
        cookiesFile.toFile().deleteOnExit();

        log.info("Created cookies file with {} bytes", Files.size(cookiesFile));
        return cookiesFile;
    }

    public void cleanupTempFiles(Path... files) {
        for (Path file : files) {
            if (file != null) {
                try {
                    // Проверяем, существует ли файл и не пустой ли он
                    if (Files.exists(file)) {
                        long fileSize = Files.size(file);
                        if (fileSize == 0) {
                            log.info("Deleting empty temp file: {}", file);
                        } else {
                            log.debug("Deleting temp file: {} (size: {} bytes)", file, fileSize);
                        }
                        Files.deleteIfExists(file);
                    }
                } catch (IOException e) {
                    log.warn("Failed to delete temp file: {}", file, e);
                }
            }
        }
    }

    public void cleanupEmptyTempFiles(Path downloadDir, String downloadId) {
        try {
            String tempPrefix = "temp_" + downloadId + "_";
            try (DirectoryStream<Path> stream = Files.newDirectoryStream(downloadDir, tempPrefix + "*")) {
                for (Path tempFile : stream) {
                    if (Files.size(tempFile) == 0) {
                        Files.deleteIfExists(tempFile);
                        log.info("Deleted empty temp file: {}", tempFile);
                    }
                }
            }
        } catch (IOException e) {
            log.warn("Could not cleanup empty temp files: {}", e.getMessage());
        }
    }

    public String formatCookiesForNetscape(String rawCookies) {
        StringBuilder formatted = new StringBuilder();

        // Добавляем заголовок Netscape
        formatted.append("# Netscape HTTP Cookie File\n");
        formatted.append("# This file was generated by YT-DLP Spring Boot App\n");
        formatted.append("# Please edit at your own risk!\n\n");

        // Парсим сырые куки
        String[] cookiePairs = rawCookies.split(";");
        int validCookies = 0;

        for (String cookiePair : cookiePairs) {
            cookiePair = cookiePair.trim();
            if (cookiePair.isEmpty()) continue;

            String[] parts = cookiePair.split("=", 2);
            if (parts.length == 2) {
                String name = parts[0].trim();
                String value = parts[1].trim();

                if (!name.isEmpty() && !value.isEmpty()) {
                    // Форматируем в Netscape format
                    // domain \t flag \t path \t secure \t expiration \t name \t value
                    formatted.append(".youtube.com")  // domain
                            .append("\tTRUE")         // flag
                            .append("\t/")            // path
                            .append("\tTRUE")         // secure (TRUE для HTTPS сайтов)
                            .append("\t")             // expiration
                            .append(System.currentTimeMillis() / 1000 + 86400) // 1 день
                            .append("\t")
                            .append(name)
                            .append("\t")
                            .append(value)
                            .append("\n");
                    validCookies++;
                    log.debug("Formatted cookie: {} (value length: {})", name, value.length());
                }
            }
        }

        log.info("Successfully formatted {} cookies for Netscape format", validCookies);
        return formatted.toString();
    }

    public void validateSelectedFormats(VideoInfo videoInfo, FormatSelection formats) throws IOException {
        log.info("Validating selected formats...");

        if (formats.isCombined()) {
            // Проверяем комбинированный формат
            VideoFormatInfo format = formats.getVideoFormat();
            if (format.getUrl() == null || format.getUrl().trim().isEmpty()) {
                throw new IOException("Combined format " + format.getFormat_id() + " has no URL");
            }
            log.info("Validated combined format: {} - {}", format.getFormat_id(), format.getFormat_note());
        } else {
            // Проверяем видео формат
            VideoFormatInfo videoFormat = formats.getVideoFormat();
            if (videoFormat.getUrl() == null || videoFormat.getUrl().trim().isEmpty()) {
                throw new IOException("Video format " + videoFormat.getFormat_id() + " has no URL");
            }

            // Проверяем аудио формат
            VideoFormatInfo audioFormat = formats.getAudioFormat();
            if (audioFormat.getUrl() == null || audioFormat.getUrl().trim().isEmpty()) {
                throw new IOException("Audio format " + audioFormat.getFormat_id() + " has no URL");
            }

            log.info("Validated separate formats - Video: {}, Audio: {}",
                    videoFormat.getFormat_id(), audioFormat.getFormat_id());
        }
    }
}